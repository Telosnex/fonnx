import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:fonnx/models/minilml6v2/mini_lm_l6_v2.dart';
import 'package:fonnx_example/padding.dart';
import 'dart:async';
import 'package:path_provider/path_provider.dart' as path_provider;
import 'package:path/path.dart' as path;

class MiniLmL6V2Widget extends StatefulWidget {
  const MiniLmL6V2Widget({super.key});

  @override
  State<MiniLmL6V2Widget> createState() => _MiniLmL6V2WidgetState();
}

class _MiniLmL6V2WidgetState extends State<MiniLmL6V2Widget> {
  bool? _verifyPassed;
  String? _speedTestResult;

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        heightPadding,
        Text(
          'MiniLM L6 V2',
          style: Theme.of(context).textTheme.headlineLarge,
        ),
        const Text(
            '23 MB model can convert text to a 384-dimensional vector. By Microsoft.\nFor symmetric search: matching a query to other text like it.'),
        heightPadding,
        Row(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            ElevatedButton(
              onPressed: _runMiniLmL6V2VerificationTest,
              child: const Text('Test Correctness'),
            ),
            widthPadding,
            if (_verifyPassed == true)
              const Icon(
                Icons.check,
                color: Colors.green,
              ),
            if (_verifyPassed == false)
              const Icon(
                Icons.close,
                color: Colors.red,
              ),
          ],
        ),
        heightPadding,
        Row(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            ElevatedButton(
              onPressed: _runMiniLmL6V2SpeedTest,
              child: const Text('Test Speed'),
            ),
            widthPadding,
            if (_speedTestResult != null) Text(_speedTestResult!),
          ],
        ),
      ],
    );
  }

  void _runMiniLmL6V2VerificationTest() async {
    final modelPath = await getModelPath('miniLmL6V2.onnx');
    final model = MiniLmL6V2.load(modelPath);
    final result = await model
        .getEmbeddingAsVector(MiniLmL6V2.tokenizer.tokenize('').first.tokens);
    final embedding = result;
    final isNotMatch = embedding.indexed.any((outer) {
      final doesNot = outer.$2 != miniLmL6V2ExpectedForEmptyString[outer.$1];
      // Use 4 significant figures.
      // Slight mismatch between iOS and macOS. For example:
      // "0.36081504821777344 but got 0.3608149588108063"
      final doesNotAt5 = doesNot &&
          outer.$2.toStringAsFixed(4) !=
              miniLmL6V2ExpectedForEmptyString[outer.$1].toStringAsFixed(4);
      if (doesNotAt5) {
        debugPrint('Expected ${miniLmL6V2ExpectedForEmptyString[outer.$1]} '
            'but got ${outer.$2} at index ${outer.$1}');
      }
      return doesNotAt5;
    });
    setState(() {
      _verifyPassed = !isNotMatch;
    });
  }

  void _runMiniLmL6V2SpeedTest() async {
    final string = await rootBundle.loadString('assets/text_sample.txt');
    final textAndTokens = MiniLmL6V2.tokenizer.tokenize(string);
    final path = await getModelPath('miniLmL6V2.onnx');
    final model = MiniLmL6V2.load(path);
    debugPrint('Loaded model');
    // Warm up. This is not necessary, but it's nice to do. Only the first call
    // to a model is slow.
    for (var i = 0; i < 5; i++) {
      await model.getEmbeddingAsVector(
        textAndTokens[i % textAndTokens.length].tokens,
      );
    }
    debugPrint('Warmed up');

    final stopwatch = Stopwatch()..start();
    var completed = 0;
    while (completed < 20) {
      await model.getEmbeddingAsVector(
          textAndTokens[completed % textAndTokens.length].tokens);
      completed++;
    }
    stopwatch.stop();
    final elapsed = stopwatch.elapsedMilliseconds;
    final speed = (elapsed / completed.toDouble()).round();
    debugPrint('done');
    setState(() {
      _speedTestResult = '$speed ms for 200 words';
    });
  }
}

Future<String> getModelPath(String modelFilenameWithExtension) async {
  if (kIsWeb) {
    return 'assets/models/miniLmL6V2/$modelFilenameWithExtension';
  }
  final assetCacheDirectory =
      await path_provider.getApplicationSupportDirectory();
  final modelPath =
      path.join(assetCacheDirectory.path, modelFilenameWithExtension);

  File file = File(modelPath);
  bool fileExists = await file.exists();
  final fileLength = fileExists ? await file.length() : 0;

  // Do not use path package / path.join for paths.
  // After testing on Windows, it appears that asset paths are _always_ Unix style, i.e.
  // use /, but path.join uses \ on Windows.
  final assetPath =
      'assets/models/miniLmL6V2/${path.basename(modelFilenameWithExtension)}';
  final assetByteData = await rootBundle.load(assetPath);
  final assetLength = assetByteData.lengthInBytes;
  final fileSameSize = fileExists && fileLength == assetLength;
  if (!fileExists || !fileSameSize) {
    debugPrint(
        'Copying model to $modelPath. Why? Either the file does not exist (${!fileExists}), '
        'or it does exist but is not the same size as the one in the assets '
        'directory. (${!fileSameSize})');

    List<int> bytes = assetByteData.buffer.asUint8List(
      assetByteData.offsetInBytes,
      assetByteData.lengthInBytes,
    );
    await file.writeAsBytes(bytes, flush: true);
  }

  return modelPath;
}

const miniLmL6V2ExpectedForEmptyString = [
  -0.13906331360340118,
  0.009836590848863125,
  -0.00920757744461298,
  -0.014994002878665924,
  0.05227697640657425,
  -0.012824870645999908,
  0.1025015115737915,
  0.0103102196007967,
  -0.06241082400083542,
  -0.07878308743238449,
  -0.0033513838425278664,
  -0.042624495923519135,
  0.031745944172143936,
  0.0034998764749616385,
  -0.008923191577196121,
  -0.011347266845405102,
  -0.04200811684131622,
  -0.03475426137447357,
  -0.00187681894749403,
  0.01982916332781315,
  -0.016024012118577957,
  0.031205089762806892,
  0.01668056845664978,
  -0.0027575171552598476,
  -0.023327704519033432,
  0.009009458124637604,
  -0.01874595321714878,
  0.0359843373298645,
  -0.011814885772764683,
  -0.06434141099452972,
  -0.038727547973394394,
  0.00884802546352148,
  0.09871795773506165,
  0.01154914777725935,
  -0.0026455791667103767,
  -0.023267285898327827,
  -0.07674653828144073,
  -0.0742356926202774,
  0.03218267112970352,
  0.03227563947439194,
  0.019805604591965675,
  -0.0400811992585659,
  -0.013197735883295536,
  0.03224090114235878,
  0.0716002956032753,
  -0.05868931859731674,
  0.009315207600593567,
  -0.013247701339423656,
  0.04931993409991264,
  -0.04390692338347435,
  -0.012279419228434563,
  -0.017131609842181206,
  0.026210714131593704,
  -0.05071517452597618,
  0.05717520788311958,
  -0.03574931249022484,
  0.024599246680736542,
  -0.040047235786914825,
  0.03188648074865341,
  -0.004993753042072058,
  0.029345566406846046,
  0.0067166173830628395,
  -0.18147151172161102,
  0.06841379404067993,
  -0.11824706941843033,
  0.04579973220825195,
  0.04118477925658226,
  -0.003090091049671173,
  0.024280503392219543,
  0.054514702409505844,
  0.05190356820821762,
  -0.021832959726452827,
  0.008431512862443924,
  -0.14054521918296814,
  0.03523223102092743,
  0.032916855067014694,
  0.03539169952273369,
  0.03953409567475319,
  0.05826951190829277,
  0.08247207850217819,
  -0.04594939574599266,
  -0.00853726640343666,
  -0.09501095861196518,
  0.017106221988797188,
  0.035441163927316666,
  -0.034111037850379944,
  0.0025113169103860855,
  -0.03711564093828201,
  -0.04795138165354729,
  0.027658620849251747,
  0.004428762011229992,
  -0.07738233357667923,
  0.06300409138202667,
  -0.015174082480370998,
  -0.07447846233844757,
  -0.006869061850011349,
  0.008710288442671299,
  0.02580852247774601,
  -0.09168470650911331,
  0.3603824973106384,
  0.035204075276851654,
  0.04110225290060043,
  0.0576481856405735,
  -0.0027036212850362062,
  0.009814114309847355,
  -0.049314502626657486,
  -0.03939623385667801,
  0.033263202756643295,
  0.008480197750031948,
  0.04600038751959801,
  -0.011622639372944832,
  -0.04424995929002762,
  0.02192545123398304,
  0.03981870040297508,
  -0.0013016888406127691,
  0.10868142545223236,
  0.00001512126709712902,
  -0.019732892513275146,
  0.02207948826253414,
  0.003926226869225502,
  0.006659842096269131,
  -0.013278456404805183,
  0.0022076379973441362,
  0.019015315920114517,
  0.07463684678077698,
  -0.16012579202651978,
  -0.03070761263370514,
  -6.876556728969947e-33,
  0.001809873734600842,
  -0.018624719232320786,
  -0.006852580234408379,
  0.016883501783013344,
  0.04388047754764557,
  0.030137354508042336,
  0.00013926396786700934,
  -0.03203434497117996,
  0.0030959707219153643,
  0.029199989512562752,
  -0.00023862831585574895,
  0.06710437685251236,
  -0.023702140897512436,
  0.04735254868865013,
  0.087630994617939,
  0.00895844679325819,
  -0.04116826131939888,
  0.016565285623073578,
  -0.014780327677726746,
  -0.029684774577617645,
  -0.01466201338917017,
  0.014500043354928493,
  -0.023770388215780258,
  0.01609949953854084,
  -0.03319348767399788,
  -0.06981059163808823,
  0.03377532213926315,
  -0.09645754843950272,
  0.053935714066028595,
  -0.006304838694632053,
  -0.021800141781568527,
  0.05555794760584831,
  -0.019743161275982857,
  -0.0022450722754001617,
  -0.022628914564847946,
  -0.08303135633468628,
  0.056863948702812195,
  -0.05909491330385208,
  -0.03115908056497574,
  0.040997348725795746,
  -0.045687876641750336,
  0.030841104686260223,
  -0.046299587935209274,
  -0.06362295150756836,
  0.02200326696038246,
  0.16401338577270508,
  -0.0237567275762558,
  -0.014566564932465553,
  -0.10446877032518387,
  0.08362219482660294,
  0.0008460235549136996,
  -0.013779129832983017,
  -0.08197145164012909,
  0.026885712519288063,
  -0.025600774213671684,
  -0.0029037431813776493,
  0.008676297031342983,
  -0.06340287625789642,
  0.033101096749305725,
  -0.0026916153728961945,
  0.020479146391153336,
  0.056847162544727325,
  -0.02612127549946308,
  0.03580364212393761,
  -0.0512765496969223,
  -0.03215285390615463,
  0.014525717124342918,
  0.004810094367712736,
  0.021268505603075027,
  -0.0066880290396511555,
  -0.05721180886030197,
  0.048885371536016464,
  0.06824368983507156,
  0.0016624733107164502,
  -0.03367568552494049,
  -0.031553033739328384,
  -0.04387765750288963,
  0.04805447906255722,
  0.0606042854487896,
  0.004152354784309864,
  0.01760331355035305,
  -0.06095360592007637,
  0.0031963230576366186,
  -0.020657088607549667,
  0.07594243437051773,
  0.03626839816570282,
  0.02714438922703266,
  -0.06663411855697632,
  0.003531615948304534,
  -0.03096071258187294,
  -0.019794469699263573,
  0.04872458428144455,
  0.03498750925064087,
  0.05315138399600983,
  0.023539481684565544,
  4.975131066351556e-33,
  -0.06204986944794655,
  0.0347631573677063,
  -0.046074073761701584,
  0.11772158741950989,
  -0.019547689706087112,
  0.003872295143082738,
  0.056023191660642624,
  0.07285337895154953,
  -0.060825493186712265,
  0.04189600422978401,
  0.021158693358302116,
  -0.07478518038988113,
  0.037059199064970016,
  0.03226417303085327,
  0.02242639660835266,
  0.031185312196612358,
  0.04784078896045685,
  0.04873792454600334,
  -0.04335540905594826,
  -0.05339633673429489,
  -0.005982690025120974,
  -0.025695133954286575,
  -0.031118119135499,
  0.009460956789553165,
  -0.003572118002921343,
  0.04145520180463791,
  0.07524807006120682,
  0.07655511051416397,
  -0.01820429228246212,
  0.026848917827010155,
  0.034937288612127304,
  -0.00820450484752655,
  -0.05511997267603874,
  -0.10851228982210159,
  0.020665325224399567,
  0.051601383835077286,
  -0.026492653414607048,
  0.0012918951688334346,
  0.04366614669561386,
  -0.061838604509830475,
  0.03470580279827118,
  -0.03471580147743225,
  0.0014389598509296775,
  0.13915374875068665,
  -0.02811071276664734,
  0.009056011214852333,
  -0.019046394154429436,
  0.026582174003124237,
  0.008485942147672176,
  0.07851098477840424,
  -0.0772353857755661,
  -0.015982376411557198,
  -0.04288474842905998,
  0.03550837188959122,
  -0.020938511937856674,
  0.05198713019490242,
  -0.042252980172634125,
  0.06965319812297821,
  -0.04798373579978943,
  0.028737956658005714,
  0.03183069825172424,
  0.009351588785648346,
  -0.01493410486727953,
  0.015624579042196274,
  -0.06094258278608322,
  0.01645795814692974,
  -0.033718716353178024,
  -0.05460958927869797,
  -0.0060613881796598434,
  -0.05282079428434372,
  0.010042947717010975,
  -0.04492945969104767,
  -0.12877818942070007,
  0.024231713265180588,
  -0.10110481083393097,
  -0.061533547937870026,
  -0.028988515958189964,
  -0.003065412398427725,
  -0.023916712030768394,
  -0.07514944672584534,
  0.0007371967658400536,
  0.027584871277213097,
  -0.03244815394282341,
  0.0035671251825988293,
  -0.054081350564956665,
  -0.011649112217128277,
  0.03580334782600403,
  -0.004417410586029291,
  -0.06375366449356079,
  0.031843021512031555,
  0.029657654464244843,
  0.022819019854068756,
  0.14444203674793243,
  0.010065867565572262,
  0.0012801338452845812,
  -1.3890617545087025e-8,
  -0.031272806227207184,
  0.009364890865981579,
  -0.05382753908634186,
  0.02049165591597557,
  0.04255659878253937,
  0.07016736268997192,
  -0.021432334557175636,
  0.04666673392057419,
  0.030258813872933388,
  0.00585953937843442,
  0.03457549586892128,
  0.04066164046525955,
  -0.029878707602620125,
  0.02137971855700016,
  0.060520946979522705,
  -0.05091559514403343,
  -0.04364153742790222,
  -0.004392051603645086,
  -0.03671826422214508,
  -0.007478943094611168,
  0.011561206541955471,
  -0.011346850544214249,
  0.0004787781508639455,
  -0.07932300120592117,
  -0.0038784740027040243,
  0.014421692118048668,
  -0.02942982129752636,
  0.09041901677846909,
  0.04743003472685814,
  -0.03949298337101936,
  0.036969490349292755,
  0.027614209800958633,
  0.029846137389540672,
  0.01795412413775921,
  0.0037090100813657045,
  -0.05148525908589363,
  -0.02483055181801319,
  0.010794366709887981,
  0.014943339861929417,
  -0.014486411586403847,
  -0.05308374762535095,
  0.012032250873744488,
  0.08184229582548141,
  0.02683117985725403,
  -0.02767944522202015,
  -0.03460268676280975,
  0.021091558039188385,
  -0.0020501180551946163,
  -0.04251120239496231,
  -0.0927390456199646,
  0.005625035613775253,
  0.0061136516742408276,
  -0.0021652663126587868,
  0.06665311008691788,
  0.11405877768993378,
  -0.013130064122378826,
  0.019076162949204445,
  0.0009108911035582423,
  0.05477960780262947,
  0.02468058094382286,
  0.12199993431568146,
  0.11065177619457245,
  0.05141545832157135,
  0.004587579518556595
];
