import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import 'package:path_provider/path_provider.dart' as path_provider;
import 'package:path/path.dart' as path;

import 'package:fonnx/fonnx.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  String _platformVersion = 'Unknown';
  String _lastStatusText = '';
  final _fonnxPlugin = Fonnx();

  @override
  void initState() {
    super.initState();
    initPlatformState();
  }

  // Platform messages are asynchronous, so we initialize in an async method.
  Future<void> initPlatformState() async {
    String platformVersion;
    // Platform messages may fail, so we use a try/catch PlatformException.
    // We also handle the message potentially returning null.
    try {
      platformVersion =
          await _fonnxPlugin.getPlatformVersion() ?? 'Unknown platform version';
    } on PlatformException {
      platformVersion = 'Failed to get platform version.';
    }

    // If the widget was removed from the tree while the asynchronous platform
    // message was in flight, we want to discard the reply rather than calling
    // setState to update our non-existent appearance.
    if (!mounted) return;

    setState(() {
      _platformVersion = platformVersion;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Plugin example app'),
        ),
        body: Center(
          child: SingleChildScrollView(
            child: Column(
              children: [
                Text('Running on: $_platformVersion\n'),
                ElevatedButton.icon(
                  onPressed: () async {
                    final modelPath = await getModelPath('miniLmL6V2.onnx');
                    final miniLmL6V2 = MiniLmL6V2(modelPath);
                    final embedding = await miniLmL6V2.getEmbedding('');
                    final isNotMatch = embedding.indexed.any((outer) {
                      final doesNot = outer.$2 !=
                          miniLmL6V2ExpectedForEmptyString[outer.$1];
                      // Use 4 significant figures.
                      // Slight mismatch between iOS and macOS. For example:
                      // "0.36081504821777344 but got 0.3608149588108063"
                      final doesNotAt5 = doesNot &&
                          outer.$2.toStringAsFixed(4) !=
                              miniLmL6V2ExpectedForEmptyString[outer.$1]
                                  .toStringAsFixed(4);
                      if (doesNotAt5) {
                        debugPrint(
                            'Expected ${miniLmL6V2ExpectedForEmptyString[outer.$1]} '
                            'but got ${outer.$2} at index ${outer.$1}');
                      }
                      return doesNotAt5;
                    });
                    setState(() {
                      _lastStatusText = isNotMatch ? '!!! Not a match !!!' : 'Match';
                    });
                  },
                  icon: const Icon(Icons.code),
                  label: const Text('Test MiniLM-L6-V2'),
                ),
                if (_lastStatusText.isNotEmpty) SelectableText(_lastStatusText),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

Future<String> getModelPath(String modelFilenameWithExtension) async {
  final assetCacheDirectory =
      await path_provider.getApplicationSupportDirectory();
  final modelPath =
      path.join(assetCacheDirectory.path, modelFilenameWithExtension);

  File file = File(modelPath);
  bool fileExists = await file.exists();
  bool fileSameSize = fileExists &&
      (await file.length()) ==
          (await rootBundle.load(
            path.join(
              "..", // '..' only needed because this example is in a sibling directory of fonnx
              "models",
              "miniLmL6V2",
              path.basename(modelFilenameWithExtension),
            ),
          ))
              .lengthInBytes;
  if (!fileExists || !fileSameSize) {
    debugPrint(
        'Copying model to $modelPath. Why? Either the file does not exist (${!fileExists}), '
        'or it does exist but is not the same size as the one in the assets '
        'directory. (${!fileSameSize})');
    ByteData data = await rootBundle.load(
      path.join(
        "..", // '..' only needed because this example is in a sibling directory of fonnx
        "models",
        "miniLmL6V2",
        path.basename(modelFilenameWithExtension),
      ),
    );
    List<int> bytes =
        data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);
    await file.writeAsBytes(bytes);
  }

  return modelPath;
}

/// Helps identify the asset path to pass to RootBundle.load().
void debugAssetPathLocation() async {
  final manifestContent = await rootBundle.loadString('AssetManifest.json');
  final Map<String, dynamic> manifestMap = json.decode(manifestContent);
  debugPrint(manifestMap.toString());
}

const miniLmL6V2ExpectedForEmptyString = [
  -0.8775855898857117,
  0.06207568198442459,
  -0.05810617655515671,
  -0.09462251514196396,
  0.32990384101867676,
  -0.08093379437923431,
  0.646855354309082,
  0.06506460905075073,
  -0.39385542273521423,
  -0.4971756935119629,
  -0.021149547770619392,
  -0.26899001002311707,
  0.20033884048461914,
  0.02208663895726204,
  -0.05631150305271149,
  -0.07160909473896027,
  -0.26510024070739746,
  -0.21932339668273926,
  -0.011844024062156677,
  0.12513571977615356,
  -0.10112258791923523,
  0.19692566990852356,
  0.10526591539382935,
  -0.017401838675141335,
  -0.14721393585205078,
  0.056855905801057816,
  -0.11829991638660431,
  0.22708603739738464,
  -0.07456009089946747,
  -0.406038761138916,
  -0.2443975806236267,
  0.055837154388427734,
  0.6229785084724426,
  0.07288309931755066,
  -0.016695432364940643,
  -0.1468326449394226,
  -0.4843236804008484,
  -0.4684785008430481,
  0.20309488475322723,
  0.2036815881729126,
  0.12498705089092255,
  -0.2529400587081909,
  -0.0832868292927742,
  0.20346234738826752,
  0.4518473148345947,
  -0.37037014961242676,
  0.058785393834114075,
  -0.08360214531421661,
  0.31124284863471985,
  -0.27708300948143005,
  -0.07749161869287491,
  -0.10811229050159454,
  0.1654077172279358,
  -0.3200477957725525,
  0.36081504821777344,
  -0.22560285031795502,
  0.15523824095726013,
  -0.2527257204055786,
  0.20122572779655457,
  -0.03151402994990349,
  0.18519079685211182,
  0.042386494576931,
  -1.14521062374115,
  0.4317382872104645,
  -0.7462207078933716,
  0.28902795910835266,
  0.2599044144153595,
  -0.01950060948729515,
  0.15322674810886383,
  0.3440254330635071,
  0.3275473713874817,
  -0.1377810537815094,
  0.053208667784929276,
  -0.8869374394416809,
  0.2223397195339203,
  0.20772810280323029,
  0.2233460694551468,
  0.24948745965957642,
  0.3677208721637726,
  0.5204557776451111,
  -0.2899724245071411,
  -0.05387604981660843,
  -0.5995847582817078,
  0.1079520732164383,
  0.2236582189798355,
  -0.2152642011642456,
  0.01584814488887787,
  -0.234225332736969,
  -0.30260634422302246,
  0.17454500496387482,
  0.027948549017310143,
  -0.4883359968662262,
  0.39759933948516846,
  -0.09575894474983215,
  -0.47001054883003235,
  -0.0433485247194767,
  0.05496793985366821,
  0.16286960244178772,
  -0.5785938501358032,
  2.2742624282836914,
  0.22216203808784485,
  0.2593836188316345,
  0.3637998700141907,
  -0.017061717808246613,
  0.061933841556310654,
  -0.311208575963974,
  -0.24861745536327362,
  0.20991379022598267,
  0.05351590737700462,
  0.29029422998428345,
  -0.07334688305854797,
  -0.27924782037734985,
  0.1383647471666336,
  0.2512834966182709,
  -0.0082145556807518,
  0.6858548521995544,
  0.00009542563930153847,
  -0.1245281845331192,
  0.13933682441711426,
  0.024777203798294067,
  0.04202820360660553,
  -0.08379623293876648,
  0.013931721448898315,
  0.11999978125095367,
  0.4710100591182709,
  -1.0105043649673462,
  -0.19378624856472015,
  -4.339582192759033e-32,
  0.011421553790569305,
  -0.11753483861684799,
  -0.04324451461434364,
  0.1065465584397316,
  0.27691611647605896,
  0.19018752872943878,
  0.0008788518607616425,
  -0.2021588385105133,
  0.01953771337866783,
  0.18427211046218872,
  -0.001505909487605095,
  0.4234749674797058,
  -0.14957688748836517,
  0.29882729053497314,
  0.5530121326446533,
  0.05653398483991623,
  -0.25980016589164734,
  0.10453839600086212,
  -0.0932740792632103,
  -0.1873314380645752,
  -0.09252743422985077,
  0.09150528907775879,
  -0.15000757575035095,
  0.10159896314144135,
  -0.20947383344173431,
  -0.44055306911468506,
  0.21314561367034912,
  -0.6087137460708618,
  0.34037160873413086,
  -0.039787888526916504,
  -0.1375739574432373,
  0.35060903429985046,
  -0.12459298968315125,
  -0.01416795700788498,
  -0.1428040862083435,
  -0.5239852070808411,
  0.3588508069515228,
  -0.37292972207069397,
  -0.19663532078266144,
  0.25872159004211426,
  -0.2883220613002777,
  0.19462867081165314,
  -0.29218238592147827,
  -0.4015047550201416,
  0.13885581493377686,
  1.0350377559661865,
  -0.14992135763168335,
  -0.09192508459091187,
  -0.6592701077461243,
  0.5277138352394104,
  0.005338992923498154,
  -0.08695583045482635,
  -0.5172964930534363,
  0.16966742277145386,
  -0.16155856847763062,
  -0.018324624747037888,
  0.05475343018770218,
  -0.400115966796875,
  0.20889079570770264,
  -0.016985952854156494,
  0.129237562417984,
  0.35874485969543457,
  -0.16484329104423523,
  0.22594571113586426,
  -0.3235904574394226,
  -0.20290672779083252,
  0.0916673094034195,
  0.030355017632246017,
  0.1342189610004425,
  -0.04220608249306679,
  -0.36104604601860046,
  0.3085004687309265,
  0.4306648373603821,
  0.010491355322301388,
  -0.21251684427261353,
  -0.19912143051624298,
  -0.2768983244895935,
  0.30325695872306824,
  0.38245490193367004,
  0.026204226538538933,
  0.1110890656709671,
  -0.3846593499183655,
  0.02017100714147091,
  -0.13036049902439117,
  0.4792492091655731,
  0.22887864708900452,
  0.17129984498023987,
  -0.4205073118209839,
  0.02228693664073944,
  -0.1953834891319275,
  -0.12491677701473236,
  0.30748578906059265,
  0.22079536318778992,
  0.33542194962501526,
  0.1485503911972046,
  3.139651371498264e-32,
  -0.3915775418281555,
  0.21937952935695648,
  -0.29075923562049866,
  0.742904543876648,
  -0.12335942685604095,
  0.02443685755133629,
  0.35354503989219666,
  0.45975515246391296,
  -0.3838508725166321,
  0.2643927335739136,
  0.13352596759796143,
  -0.4719461500644684,
  0.23386915028095245,
  0.20360922813415527,
  0.14152605831623077,
  0.1968008577823639,
  0.3019084334373474,
  0.3075699806213379,
  -0.27360257506370544,
  -0.3369677662849426,
  -0.037754908204078674,
  -0.16215404868125916,
  -0.19637683033943176,
  0.05970517545938492,
  -0.02254253253340721,
  0.2616109549999237,
  0.4748672842979431,
  0.48311564326286316,
  -0.11488166451454163,
  0.16943521797657013,
  0.22047841548919678,
  -0.05177609249949455,
  -0.3478451073169708,
  -0.6847875118255615,
  0.13041247427463531,
  0.32564038038253784,
  -0.1671869456768036,
  0.008152751252055168,
  0.2755635380744934,
  -0.3902443051338196,
  0.21901758015155792,
  -0.21908068656921387,
  0.009080830961465836,
  0.8781562447547913,
  -0.17739801108837128,
  0.05714968591928482,
  -0.1201959028840065,
  0.16775187849998474,
  0.053552158176898956,
  0.49545854330062866,
  -0.4874086380004883,
  -0.10085983574390411,
  -0.27063238620758057,
  0.224082350730896,
  -0.1321364790201187,
  0.32807469367980957,
  -0.26664549112319946,
  0.43955981731414795,
  -0.30281051993370056,
  0.18135635554790497,
  0.20087368786334991,
  0.05901498347520828,
  -0.09424451738595963,
  0.09860188513994217,
  -0.3845897912979126,
  0.10386108607053757,
  -0.212788388133049,
  -0.34462422132492065,
  -0.038251545280218124,
  -0.3333356976509094,
  0.06337793916463852,
  -0.2835359275341034,
  -0.8126792907714844,
  0.15291884541511536,
  -0.6380411982536316,
  -0.388319194316864,
  -0.18293756246566772,
  -0.019344870001077652,
  -0.1509309709072113,
  -0.4742449223995209,
  0.004652220755815506,
  0.17407959699630737,
  -0.2047702670097351,
  0.02251102402806282,
  -0.341290682554245,
  -0.0735139474272728,
  0.22594386339187622,
  -0.02787691354751587,
  -0.4023296535015106,
  0.2009514570236206,
  0.18716028332710266,
  0.14400377869606018,
  0.9115290641784668,
  0.0635225772857666,
  0.008078528568148613,
  -8.765939440991133e-8,
  -0.19735302031040192,
  0.05909892916679382,
  -0.3396889567375183,
  0.129316508769989,
  0.26856154203414917,
  0.4428045451641083,
  -0.13525283336639404,
  0.29449933767318726,
  0.19095401465892792,
  0.03697774186730385,
  0.21819525957107544,
  0.25660303235054016,
  -0.1885552853345871,
  0.13492079079151154,
  0.3819289803504944,
  -0.3213125765323639,
  -0.27540823817253113,
  -0.027716880664229393,
  -0.23171761631965637,
  -0.04719729721546173,
  0.07295919954776764,
  -0.07160646468400955,
  0.0030214209109544754,
  -0.5005829334259033,
  -0.02447585016489029,
  0.09101083874702454,
  -0.1857225000858307,
  0.5706064701080322,
  0.29931628704071045,
  -0.24922801554203033,
  0.2333030104637146,
  0.17426474392414093,
  0.18834973871707916,
  0.11330292373895645,
  0.023406416177749634,
  -0.3249075412750244,
  -0.15669792890548706,
  0.06811991333961487,
  0.09430279582738876,
  -0.0914192646741867,
  -0.3349951207637787,
  0.07593181729316711,
  0.5164813995361328,
  0.16932328045368195,
  -0.17467641830444336,
  -0.2183668464422226,
  0.13310229778289795,
  -0.01293766126036644,
  -0.26827505230903625,
  -0.5852474570274353,
  0.03549785912036896,
  0.03858136385679245,
  -0.013664325699210167,
  0.4206271767616272,
  0.7197896838188171,
  -0.08285977691411972,
  0.12038376182317734,
  0.005748352035880089,
  0.34569716453552246,
  0.15575151145458221,
  0.769903838634491,
  0.698289155960083,
  0.3244670629501343,
  0.028950795531272888
];
