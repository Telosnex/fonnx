import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:fonnx/models/minishLab/minish_lab.dart';
import 'package:fonnx_example/padding.dart';
import 'dart:async';
import 'package:path_provider/path_provider.dart' as path_provider;
import 'package:path/path.dart' as path;

class MinishLabWidget extends StatefulWidget {
  const MinishLabWidget({super.key});

  @override
  State<MinishLabWidget> createState() => _MinishLabWidgetState();
}

class _MinishLabWidgetState extends State<MinishLabWidget> {
  bool? _verifyPassed;
  String? _speedTestResult;

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        heightPadding,
        Text(
          'Minish Labs - Potion 32M',
          style: Theme.of(context).textTheme.headlineLarge,
        ),
        const Text(
            '102 MB model, runs ~30x as fast as MiniLM-L6-v2 with ~the same performance.'),
        heightPadding,
        Row(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            ElevatedButton(
              onPressed: _runMinishPotion32MVerificationTest,
              child: const Text('Test Correctness'),
            ),
            widthPadding,
            if (_verifyPassed == true)
              const Icon(
                Icons.check,
                color: Colors.green,
              ),
            if (_verifyPassed == false)
              const Icon(
                Icons.close,
                color: Colors.red,
              ),
          ],
        ),
        heightPadding,
        Row(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            ElevatedButton(
              onPressed: _runMinishPotion32MSpeedTest,
              child: const Text('Test Speed'),
            ),
            widthPadding,
            if (_speedTestResult != null) Text(_speedTestResult!),
          ],
        ),
      ],
    );
  }

  void _runMinishPotion32MVerificationTest() async {
    final modelPath = await getModelPath('potion32m.onnx');
    final model = MinishLab.load(modelPath);
    final result = await model.getEmbeddingAsVector(
        MinishLab.potion32mTokenizer.tokenize('').first.tokens);
    final embedding = result;
    final dartArrayAsString = StringBuffer();
    dartArrayAsString.write('[');
    for (var i = 0; i < embedding.length; i++) {
      dartArrayAsString.write('${embedding[i]}, ');
    }
    dartArrayAsString.write(']');
    debugPrint('Dart array: $dartArrayAsString');
    final isNotMatch = embedding.indexed.any((outer) {
      final doesNot = outer.$2 != potion32mExpectedForEmptyString[outer.$1];
      // Use 4 significant figures.
      // Slight mismatch between iOS and macOS. For example:
      // "0.36081504821777344 but got 0.3608149588108063"
      final doesNotAt5 = doesNot &&
          outer.$2.toStringAsFixed(4) !=
              potion32mExpectedForEmptyString[outer.$1].toStringAsFixed(4);
      if (doesNotAt5) {
        debugPrint('Expected ${potion32mExpectedForEmptyString[outer.$1]} '
            'but got ${outer.$2} at index ${outer.$1}');
      }
      return doesNotAt5;
    });
    setState(() {
      _verifyPassed = !isNotMatch;
    });
  }

  void _runMinishPotion32MSpeedTest() async {
    final string = await rootBundle.loadString('assets/text_sample.txt');
    final textAndTokens = MinishLab.potion32mTokenizer.tokenize(string);
    final path = await getModelPath('potion32m.onnx');
    final model = MinishLab.load(path);
    debugPrint('Loaded model');
    // Warm up. This is not necessary, but it's nice to do. Only the first call
    // to a model is slow.
    for (var i = 0; i < 5; i++) {
      await model.getEmbeddingAsVector(
        textAndTokens[i % textAndTokens.length].tokens,
      );
    }
    debugPrint('Warmed up');

    final stopwatch = Stopwatch()..start();
    var completed = 0;
    while (completed < 1000) {
      await model.getEmbeddingAsVector(
          textAndTokens[completed % textAndTokens.length].tokens);
      completed++;
    }
    stopwatch.stop();
    final elapsed = stopwatch.elapsedMilliseconds;
    final speed = (elapsed / completed.toDouble()).round();
    debugPrint('done');
    setState(() {
      final numberPerSecond = (1000 / (elapsed / completed)).round();
      _speedTestResult = '$speed ms for 200 words ($numberPerSecond / sec)';
    });
  }
}

Future<String> getModelPath(String modelFilenameWithExtension) async {
  if (kIsWeb) {
    return 'assets/models/minishLab/$modelFilenameWithExtension';
  }
  final assetCacheDirectory =
      await path_provider.getApplicationSupportDirectory();
  final modelPath =
      path.join(assetCacheDirectory.path, modelFilenameWithExtension);

  File file = File(modelPath);
  bool fileExists = await file.exists();
  final fileLength = fileExists ? await file.length() : 0;

  // Do not use path package / path.join for paths.
  // After testing on Windows, it appears that asset paths are _always_ Unix style, i.e.
  // use /, but path.join uses \ on Windows.
  final assetPath =
      'assets/models/minishLab/${path.basename(modelFilenameWithExtension)}';
  final assetByteData = await rootBundle.load(assetPath);
  final assetLength = assetByteData.lengthInBytes;
  final fileSameSize = fileExists && fileLength == assetLength;
  if (!fileExists || !fileSameSize) {
    debugPrint(
        'Copying model to $modelPath. Why? Either the file does not exist (${!fileExists}), '
        'or it does exist but is not the same size as the one in the assets '
        'directory. (${!fileSameSize})');

    List<int> bytes = assetByteData.buffer.asUint8List(
      assetByteData.offsetInBytes,
      assetByteData.lengthInBytes,
    );
    await file.writeAsBytes(bytes, flush: true);
  }

  return modelPath;
}

const potion32mExpectedForEmptyString = [
  0.10798531770706177,
  0.02445988543331623,
  0.10394859313964844,
  0.07595387101173401,
  -0.02832152135670185,
  0.07573267072439194,
  -0.014013172127306461,
  0.1930387169122696,
  -0.01321983803063631,
  -0.09541390836238861,
  -0.11438662558794022,
  0.016536904498934746,
  -0.006729033775627613,
  0.048274293541908264,
  -0.006546082906424999,
  -0.011500080116093159,
  0.03522422909736633,
  0.019164003431797028,
  0.028842868283391,
  0.021337777376174927,
  -0.03369271010160446,
  -0.019445491954684258,
  0.07789113372564316,
  -0.007185940630733967,
  -0.01773178018629551,
  0.004022571258246899,
  0.027343496680259705,
  -0.03121175430715084,
  0.03782561793923378,
  -0.0030701025389134884,
  0.030422555282711983,
  0.06748604774475098,
  0.04745538905262947,
  -0.09109288454055786,
  -0.07322791963815689,
  -0.015840206295251846,
  -0.06419989466667175,
  0.04217597469687462,
  0.03541028872132301,
  0.03782295435667038,
  0.10303358733654022,
  -0.008343367837369442,
  -0.03762172535061836,
  0.060767751187086105,
  0.011563627049326897,
  -0.010559454560279846,
  -0.07243069261312485,
  -0.058765754103660583,
  -0.034016694873571396,
  0.07220470160245895,
  -0.06542930006980896,
  -0.032512445002794266,
  0.01981242187321186,
  0.0017653554677963257,
  -0.102317675948143,
  -0.039372872561216354,
  -0.04172670096158981,
  -0.07166600972414017,
  0.09583128988742828,
  0.0006352856871671975,
  0.018370702862739563,
  -0.06736583262681961,
  0.021833516657352448,
  0.06896188110113144,
  0.014616487547755241,
  -0.005911566782742739,
  -0.008773650042712688,
  -0.0415303036570549,
  0.016692912206053734,
  0.028753994032740593,
  -0.05377936735749245,
  -0.05788629502058029,
  -0.007307169958949089,
  0.07991736382246017,
  -0.0038746935315430164,
  -0.014284508302807808,
  -0.03339873626828194,
  -0.045387253165245056,
  0.008182779885828495,
  -0.07043283432722092,
  -0.019957758486270905,
  0.007046994287520647,
  -0.019773952662944794,
  -0.00031808792846277356,
  -0.007954755797982216,
  -0.025784621015191078,
  -0.028655990958213806,
  -0.026099376380443573,
  0.04436817020177841,
  -0.0025043576024472713,
  0.08207971602678299,
  0.019009526818990707,
  0.07328483462333679,
  0.04415686056017876,
  -0.028124893084168434,
  0.036559127271175385,
  -0.08345478773117065,
  0.09837721288204193,
  -0.08477777242660522,
  0.04003804549574852,
  0.046788498759269714,
  0.013592450879514217,
  0.012920207343995571,
  0.05283861979842186,
  0.03807114437222481,
  -0.054610397666692734,
  0.055747270584106445,
  0.10965360701084137,
  0.02460343949496746,
  -0.0021735362242907286,
  -0.035649657249450684,
  -0.049517009407281876,
  0.0038466588594019413,
  -0.0236067958176136,
  0.03167327120900154,
  0.005231971852481365,
  0.0020602643489837646,
  0.05151086673140526,
  -0.07577317208051682,
  0.019057339057326317,
  -0.028042521327733994,
  0.037319812923669815,
  -0.009488677605986595,
  -0.02804935723543167,
  -0.024977590888738632,
  -0.0812322199344635,
  -0.043297894299030304,
  -0.010686999186873436,
  0.02321521006524563,
  -0.012411203235387802,
  0.013605580665171146,
  0.034035224467515945,
  0.013548450544476509,
  -0.018111469224095345,
  0.003651411272585392,
  -0.007929656654596329,
  -0.06688069552183151,
  -0.016600608825683594,
  -0.054528750479221344,
  0.03737916797399521,
  0.029076065868139267,
  0.017727816477417946,
  -0.00046946926158852875,
  0.00228377734310925,
  0.05338744819164276,
  0.01399599201977253,
  -0.012539537623524666,
  -0.10059426724910736,
  0.018683811649680138,
  -0.015906568616628647,
  -0.017262939363718033,
  0.0286889486014843,
  -0.029944859445095062,
  -0.01630753092467785,
  -0.06182599812746048,
  0.06668757647275925,
  -0.017240377143025398,
  0.03458893299102783,
  -0.08509466052055359,
  0.08082222193479538,
  0.034790389239788055,
  0.010970906354486942,
  0.050663795322179794,
  -0.029428768903017044,
  -0.07675737142562866,
  0.0025501176714897156,
  -0.05930236726999283,
  0.0280881579965353,
  -0.0417572557926178,
  -0.0009265933185815811,
  0.052970949560403824,
  -0.037974871695041656,
  -0.060937076807022095,
  0.07906725257635117,
  -0.0853496640920639,
  0.04584597423672676,
  0.04802938550710678,
  0.019196491688489914,
  -0.03870214521884918,
  -0.02945064753293991,
  0.04864552989602089,
  0.010567755438387394,
  -0.01868552342057228,
  -0.01237877830862999,
  -0.0595984160900116,
  -0.07119017839431763,
  -0.012109455652534962,
  -0.012102090753614902,
  0.06768345087766647,
  0.0007457885658368468,
  -0.010720632039010525,
  0.05655680596828461,
  -0.03991745039820671,
  -0.040788520127534866,
  0.017405491322278976,
  0.02034693956375122,
  -0.01652553677558899,
  0.025922313332557678,
  0.03054862841963768,
  0.12103406339883804,
  -0.03309902176260948,
  -0.09588507562875748,
  -0.022880785167217255,
  -0.06723826378583908,
  0.019361309707164764,
  0.06522694230079651,
  -0.04786444455385208,
  0.034635890275239944,
  -0.02694120444357395,
  0.0643586590886116,
  0.004650845658034086,
  -0.012071161530911922,
  0.03560253232717514,
  0.0375915952026844,
  -0.04951895773410797,
  -0.0019987537525594234,
  -0.009413428604602814,
  0.019548887386918068,
  0.037016600370407104,
  0.041012249886989594,
  0.02091495878994465,
  -0.04580860584974289,
  -0.0371418222784996,
  -0.0502420999109745,
  0.04250139743089676,
  -0.03635115548968315,
  -0.07118022441864014,
  -0.0328090526163578,
  -0.00883438903838396,
  0.020557908341288567,
  0.03660733252763748,
  -0.038234371691942215,
  -0.049634698778390884,
  0.02629706636071205,
  -0.02387016825377941,
  0.03505760058760643,
  -0.00020596326794475317,
  -0.006961525417864323,
  -0.009230352938175201,
  0.034596286714076996,
  0.04357021301984787,
  -0.017995944246649742,
  -0.03021753393113613,
  -0.006806430406868458,
  -0.002119926968589425,
  0.006581686902791262,
  0.006952518131583929,
  -0.04464040696620941,
  -0.024422727525234222,
  0.06505580246448517,
  -0.01346802618354559,
  0.023360725492239,
  -0.045580875128507614,
  -0.0147008141502738,
  -0.030720237642526627,
  -0.004107451997697353,
  0.02226124331355095,
  0.0020877534989267588,
  0.009212921373546124,
  -0.00794565211981535,
  -0.08960484713315964,
  0.012083274312317371,
  0.049578335136175156,
  -0.015735941007733345,
  -0.020321741700172424,
  0.04250983148813248,
  0.03711606189608574,
  0.07422319799661636,
  -0.02415432594716549,
  -0.015405772253870964,
  -0.003364596050232649,
  -0.04378928616642952,
  -0.006890246644616127,
  0.014219697564840317,
  -0.0016146525740623474,
  0.021959731355309486,
  -0.012974933721125126,
  -0.05791522189974785,
  0.0576968789100647,
  0.000879426661413163,
  -0.029972074553370476,
  0.02073999121785164,
  0.024108901619911194,
  0.047616150230169296,
  0.009456462226808071,
  0.04620656371116638,
  -0.015779489651322365,
  0.009820840321481228,
  0.024379028007388115,
  0.0593378022313118,
  -0.06477228552103043,
  -0.006638788152486086,
  0.01785442605614662,
  -0.02285461686551571,
  -0.04049267992377281,
  -0.02958192303776741,
  -0.02264433540403843,
  0.02677597478032112,
  -0.010061848908662796,
  0.021838730201125145,
  -0.011127623729407787,
  0.0522141270339489,
  0.00464145140722394,
  -0.023550761863589287,
  -0.05447934567928314,
  0.10966897010803223,
  -0.054624900221824646,
  0.018312690779566765,
  0.017933832481503487,
  -0.006015902850776911,
  0.017087776213884354,
  0.009646761231124401,
  -0.04379617050290108,
  0.029319552704691887,
  0.008119945414364338,
  -0.06693924963474274,
  0.02267349325120449,
  0.03838139399886131,
  0.009006092324852943,
  -0.0485178604722023,
  0.09014584124088287,
  0.05256297066807747,
  0.004237188491970301,
  -0.08051759004592896,
  -0.0012231470318511128,
  -0.01575382426381111,
  -0.011739825829863548,
  -0.019234556704759598,
  -0.03322203457355499,
  0.030301542952656746,
  -0.04431146755814552,
  -0.06550660729408264,
  -0.03168879821896553,
  0.07093127816915512,
  0.040880925953388214,
  0.008738113567233086,
  -0.003656235756352544,
  -0.044871736317873,
  0.021536413580179214,
  0.021470552310347557,
  0.05295670032501221,
  -0.05238538235425949,
  -0.06919918954372406,
  0.01693151704967022,
  -0.05311599373817444,
  -0.029537886381149292,
  0.047881077975034714,
  0.016086747869849205,
  -0.0227261520922184,
  -0.03224517032504082,
  -0.032262302935123444,
  -0.007483766879886389,
  0.04596887528896332,
  0.043993230909109116,
  -0.04752741754055023,
  -0.0369996577501297,
  0.0185619555413723,
  0.021609680727124214,
  -0.010578751564025879,
  -0.054142870008945465,
  -0.0028038749005645514,
  -0.056880395859479904,
  0.05030054599046707,
  0.048479221761226654,
  -0.015696482732892036,
  -0.061928100883960724,
  0.010356993414461613,
  0.00943017564713955,
  0.035924751311540604,
  -0.000769808073528111,
  -0.016272367909550667,
  0.005060065537691116,
  -0.07963284105062485,
  0.03293754160404205,
  0.0748097151517868,
  0.05531400442123413,
  -0.04378141835331917,
  -0.06251989305019379,
  0.017113136127591133,
  -0.06934845447540283,
  -0.03732825070619583,
  0.006372776813805103,
  0.020209962502121925,
  0.0027039614506065845,
  -0.02350841835141182,
  0.06204242631793022,
  0.054228123277425766,
  -0.011571981012821198,
  -0.12479639798402786,
  -0.0020739666651934385,
  0.02059805952012539,
  -0.08250388503074646,
  0.010644370689988136,
  -0.026974212378263474,
  -0.08660060912370682,
  -0.028750766068696976,
  0.07681193947792053,
  -0.06593643873929977,
  -0.04956633597612381,
  0.12358865141868591,
  0.05016622319817543,
  -0.03530265763401985,
  0.0036768156569451094,
  -0.01994071900844574,
  -0.05080677196383476,
  -0.041872501373291016,
  0.029134081676602364,
  -0.012979301624000072,
  -0.06336858868598938,
  0.03274335339665413,
  -0.005121320951730013,
  -0.023610198870301247,
  0.03984132036566734,
  -0.05414414778351784,
  -0.12225085496902466,
  0.04916870966553688,
  -0.09395305067300797,
  -0.034023940563201904,
  -0.040660250931978226,
  -0.028629211708903313,
  0.03052426688373089,
  0.025440994650125504,
  0.0019865892827510834,
  0.02170703373849392,
  -0.002485250122845173,
  0.023368608206510544,
  0.011729201301932335,
  0.01939249411225319,
  0.02423750050365925,
  -0.021555760875344276,
  0.0591265931725502,
  -0.017435096204280853,
  0.05050372704863548,
  -0.005559752229601145,
  -0.006279117427766323,
  -0.038208961486816406,
  -0.05891190096735954,
  0.04473406448960304,
  -0.08622124791145325,
  0.015245850197970867,
  -0.006285943556576967,
  -0.004775933921337128,
  0.01893223077058792,
  0.012036358006298542,
  0.0035359126050025225,
  -0.10425399243831635,
  0.0937984511256218,
  -0.013078426942229271,
  0.026456937193870544,
  0.007104331161826849,
  -0.03844134882092476,
  0.04721686616539955,
  -0.07090065628290176,
  -0.020392481237649918,
  0.007143600843846798,
  -0.00020131103519815952,
  0.010571341961622238,
  -0.02357112243771553,
  0.007011647801846266,
  0.036300234496593475,
  -0.015059873461723328,
  -0.06341790407896042,
  0.006270186509937048,
  0.05613389611244202,
  0.04329673573374748,
  -0.0487721711397171,
  0.08481044322252274,
  -0.03225446864962578,
  0.012285443022847176,
  -0.008527185767889023,
  -0.0026529852766543627,
  0.02597036585211754,
  0.019663427025079727,
  -0.01632021553814411,
  0.01927543431520462,
  -0.06537485122680664,
  -0.06350159645080566,
  0.024454208090901375,
  -0.034178830683231354,
  0.027641013264656067,
  -0.07574625313282013,
  0.06861433386802673,
  -0.05438831076025963,
  -0.000860116386320442,
  0.019127577543258667,
  0.03151661902666092,
  -0.012847254052758217,
  -0.06924494355916977,
  0.050677765160799026,
  0.000505707401316613,
  -0.00772682623937726,
  0.007491643540561199,
  -0.0341116227209568,
  0.05910675227642059,
  0.015063432045280933,
  0.004402055870741606,
  0.009670105762779713,
  0.03249979764223099,
  0.009757500141859055,
  0.036898113787174225,
  0.0006024519680067897,
  -0.028993824496865273,
  -0.03197403624653816,
  0.005007989704608917,
  0.05272199586033821,
  -0.04565979167819023,
  0.03192856162786484,
  -0.020718948915600777,
  -0.030224895104765892,
  0.03748767077922821,
  0.0032091913744807243,
  -0.022539334371685982,
];
